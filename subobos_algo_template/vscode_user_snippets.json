{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"contest": {
		"prefix": "test",
		"body": [
			"/**",
			" *    author: subobo",
			" *    created: $CURRENT_DATE.$CURRENT_MONTH.$CURRENT_YEAR $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
			"**/",
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
      "",
      "#ifdef LOCAL",
      "#include \"algo/debug.h\"",
      "#else",
      "#define debug(...) 42",
      "#endif",
      "",
			"int main() {",
			"  ios::sync_with_stdio(false);",
			"  cin.tie(0);",
			"  return 0;",
			"}",
		],
		"description": "Log output to console"
	},
	"cplusplus": {
		"prefix": "cpp",
		"body": [
			"/**",
			" *    author: Jingbo Su",
			" *    created: $CURRENT_MONTH_NAME/$CURRENT_DATE/$CURRENT_YEAR $CURRENT_DAY_NAME",
			"**/",
			"#include <iostream>",
			"",
			"int main() {",
			"  return 0;",
			"}",
		],
		"description": "Log output to console"
	},
	"usaco": {
		"prefix": "usaco",
		"body": [
			"/*",
			"  ID: sujingb1",
			"  TASK: test",
			"  LANG: C++14",
			"*/",
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"int main() {",
			"  ifstream fin (\"test.in\");",
			"  ofstream fout (\"test.out\");",
			"  return 0;",
			"}",
		],
		"description": "Log output to console"
	},
  "read": {
    "prefix": "read",
    "body": [
      "",
      "template<typename T>",
      "inline void read (T& v) {",
      "  v = 0;",
      "  char c = getchar();",
      "  while (c < '0' || c > '9') {",
      "    c = getchar();",
      "  }",
      "  while (c >= '0' && c <= '9') {",
      "    v = (v << 1) + (v << 3) + (c ^ 48);",
      "    c = getchar();",
      "  }",
      "}",
      "",
      "template<typename T, typename... A>",
      "inline void read(T& v, A&... args) {",
      "  read(v);",
      "  read(args...);",
      "}"
    ],
		"description": "Log output to console"
  },
  "dsu": {
    "prefix": "dsu",
    "body": [
      "",
      "class dsu {",
      " public:",
      "  vector<int> p;",
      "  int n;",
      "",
      "  dsu(int _n) : n(_n) {",
      "    p.resize(n);",
      "    iota(p.begin(), p.end(), 0);",
      "  }",
      "",
      "  inline int get(int x) {",
      "    return (x == p[x] ? x : get(p[x]));",
      "  }",
      "",
      "  inline bool unite(int x, int y) {",
      "    x = get(x);",
      "    y = get(y);",
      "    if (x != y) {",
      "      p[x] = y;",
      "      return true;",
      "    }",
      "    return false;",
      "  }",
      "};",
      ""
    ]
  },
  "fenwick": {
    "prefix": "fenwick",
    "body": [
      "",
      "template <typename T>",
      "class fenwick {",
      " public:",
      "  vector<T> fenw;",
      "  int n;",
      "",
      "  fenwick(int _n) : n(_n) {",
      "    fenw.resize(n);",
      "  }",
      "",
      "  void modify(int x, T v) {",
      "    while (x < n) {",
      "      fenw[x] += v;",
      "      x |= (x + 1);",
      "    }",
      "  }",
      "",
      "  T get(int x) {",
      "    T v{};",
      "    while (x >= 0) {",
      "      v += fenw[x];",
      "      x = (x & (x + 1)) - 1;",
      "    }",
      "    return v;",
      "  }",
      "};",
      ""
    ]
  },
  "random": {
    "prefix": "random",
    "body": [
      "mt19937 rng((unsigned int) chrono::steady_clock::now().time_since_epoch().count());"
    ]
  },
  "fastpower": {
    "prefix": "fastpow",
    "body": [
      "",
      "template <typename T, typename U>",
      "inline T power(const T& a, const T& b, const U& mod) {",
      "  assert(b >= 0);",
      "  T x = a, p = b, ans = 1;",
      "  while (p > 0) {",
      "    if (p & 1) ans = ans * x % mod;",
      "    x = x * x % mod;",
      "    p >>= 1;",
      "  }",
      "  return ans % mod;",
      "}",
      ""
    ]
  },
  "dijkstra": {
    "prefix": "dijkstra",
    "body": [
      "",
      "template <typename T>",
      "T dijkstra(const vector<vector<pair<int, int>>>& g, int from, int to) {",
      "  int n = (int) g.size();",
      "  auto inf = numeric_limits<T>::max();",
      "  assert(0 <= from && from < n && 0 <= to && to < n);",
      "  vector<T> dist(n, inf);",
      "  priority_queue<pair<T, int>, vector<pair<T, int>>, greater<pair<T, int>>> s;",
      "  dist[from] = 0;",
      "  s.emplace(dist[from], from);",
      "  while (!s.empty()) {",
      "    T expected = s.top().first;",
      "    int i = s.top().second;",
      "    s.pop();",
      "    if (dist[i] != expected) {",
      "      continue;",
      "    }",
      "    for (auto& e : g[i]) {",
      "      int to = e.first;",
      "      int cost = e.second;",
      "     if (dist[i] + cost < dist[to]) {",
      "        dist[to] = dist[i] + cost;",
      "        s.emplace(dist[to], to);",
      "      }",
      "    }",
      "  }",
      "  return dist[to];",
      "}",
      ""
    ]
  },
  "ICPC": {
		"prefix": "qq",
		"body": [
			"#include <bits/stdc++.h>",
			"",
      "using namespace std;",
      "",
			"int main() {",
			"  return 0;",
			"}",
		],
		"description": "Log output to console"
	},
  "LIS" : {
    "prefix": "lis",
    "body": [
      "",
      "template<typename T>",
      "int lis(const vector<T>& a) {",
      "  vector<T> u;",
      "  for (const T& x : a) {",
      "    auto it = upper_bound(u.begin(), u.end(), x);",
      "    if (it == u.end()) {",
      "      u.push_back(x);",
      "    } else {",
      "      *it = x;",
      "    }",
      "  }",
      "  return (int) u.size();",
      "}",
      ""
    ]
  },
  "string" : {
    "prefix": "strings",
    "body": [
      "",
      "vector<int> kmp(const string& s, const string& t) {",
      "  int n = (int) s.size();",
      "  int m = (int) t.size();",
      "  vector<int> ne(n);",
      "  for (int i = 1, j = 0; i < m; i++) {",
      "    while (j > 0 && t[i] != t[j]) j = ne[j - 1];",
      "    if (t[i] == t[j]) ++j;",
      "    ne[i] = j;",
      "  }",
      "  vector<int> pos;",
      "  for (int i = 0, j = 0; i < n; i++) {",
      "    while (j > 0 && s[i] != t[j]) j = ne[j - 1];",
      "    if (s[i] == t[j]) ++j;",
      "    if (j >= m) {",
      "      pos.push_back(i - m + 1);",
      "      j = ne[j - 1];",
      "    }",
      "  }",
      "  return pos;",
      "}",
      "",
      "int manacher(string& s) {",
      "  int n = (int) s.size();",
      "  string t(\"*\");",
      "  vector<int> p(n + n + 1);",
      "  for (int i = 0; i < n; i++) {",
      "    t += s[i];",
      "    t += '*';",
      "  }",
      "  int m = -1, r = -1;",
      "  for (int i = 0; i <= (int) t.size(); i++) {",
      "    if (i > r) {",
      "      p[i] = 1;",
      "    } else {",
      "      p[i] = min(p[m + m - i], r - i + 1);",
      "    }",
      "    while (0 <= i - p[i] && i + p[i] <= (int) t.size() && t[i - p[i]] == t[i + p[i]]) {",
      "      p[i] += 1;",
      "    }",
      "    if (i + p[i] - 1 > r) {",
      "      m = i;",
      "      r = i + p[i] - 1;",
      "    }",
      "  }",
      "  return *max_element(p.begin(), p.end()) - 1;",
      "}",
      ""
    ]
  },
  "Modular" : {
    "prefix": "Modular",
    "body": [
      "",
      "template <typename T>",
      "T inverse(T a, T m) {",
      "  T u = 0, v = 1;",
      "  while (a != 0) {",
      "    T t = m / a;",
      "    m -= t * a; swap(a, m);",
      "    u -= t * v; swap(u, v);",
      "  }",
      "  assert(m == 1);",
      "  return u;",
      "}",
      "",
      "template <typename T>",
      "class Modular {",
      " public:",
      "  using Type = typename decay<decltype(T::value)>::type;",
      "",
      "  constexpr Modular() : value() {}",
      "  template <typename U>",
      "  Modular(const U& x) {",
      "    value = normalize(x);",
      "  }",
      "",
      "  template <typename U>",
      "  static Type normalize(const U& x) {",
      "    Type v;",
      "    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);",
      "    else v = static_cast<Type>(x % mod());",
      "    if (v < 0) v += mod();",
      "    return v;",
      "  }",
      "",
      "  const Type& operator()() const { return value; }",
      "  template <typename U>",
      "  explicit operator U() const { return static_cast<U>(value); }",
      "  constexpr static Type mod() { return T::value; }",
      "",
      "  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }",
      "  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }",
      "  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }",
      "  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }",
      "  Modular& operator++() { return *this += 1; }",
      "  Modular& operator--() { return *this -= 1; }",
      "  Modular operator++(int) { Modular result(*this); *this += 1; return result; }",
      "  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }",
      "  Modular operator-() const { return Modular(-value); }",
      "",
      "  template <typename U = T>",
      "  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {",
      "#ifdef _WIN32",
      "    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);",
      "    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;",
      "    asm(",
      "      \"divl %4; \\n\\t\"",
      "      : \"=a\" (d), \"=d\" (m)",
      "      : \"d\" (xh), \"a\" (xl), \"r\" (mod())",
      "    );",
      "    value = m;",
      "#else",
      "    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));",
      "#endif",
      "    return *this;",
      "  }",
      "  template <typename U = T>",
      "  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {",
      "    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());",
      "    value = normalize(value * rhs.value - q * mod());",
      "    return *this;",
      "  }",
      "  template <typename U = T>",
      "  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {",
      "    value = normalize(value * rhs.value);",
      "    return *this;",
      "  }",
      "",
      "  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }",
      "",
      "  friend const Type& abs(const Modular& x) { return x.value; }",
      "",
      "  template <typename U>",
      "  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);",
      "",
      "  template <typename U>",
      "  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);",
      "",
      "  template <typename V, typename U>",
      "  friend V& operator>>(V& stream, Modular<U>& number);",
      "",
      " private:",
      "  Type value;",
      "};",
      "",
      "template <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }",
      "template <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }",
      "template <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }",
      "",
      "template <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }",
      "template <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }",
      "template <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }",
      "",
      "template <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }",
      "",
      "template <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }",
      "template <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }",
      "template <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }",
      "",
      "template <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }",
      "template <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }",
      "template <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }",
      "",
      "template <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }",
      "template <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }",
      "template <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }",
      "",
      "template <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }",
      "template <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }",
      "template <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }",
      "",
      "template<typename T, typename U>",
      "Modular<T> power(const Modular<T>& a, const U& b) {",
      "  assert(b >= 0);",
      "  Modular<T> x = a, res = 1;",
      "  U p = b;",
      "  while (p > 0) {",
      "    if (p & 1) res *= x;",
      "    x *= x;",
      "    p >>= 1;",
      "  }",
      "  return res;",
      "}",
      "",
      "template <typename T>",
      "bool IsZero(const Modular<T>& number) {",
      "  return number() == 0;",
      "}",
      "",
      "template <typename T>",
      "string to_string(const Modular<T>& number) {",
      "  return to_string(number());",
      "}",
      "",
      "// U == std::ostream? but done this way because of fastoutput",
      "template <typename U, typename T>",
      "U& operator<<(U& stream, const Modular<T>& number) {",
      "  return stream << number();",
      "}",
      "",
      "// U == std::istream? but done this way because of fastinput",
      "template <typename U, typename T>",
      "U& operator>>(U& stream, Modular<T>& number) {",
      "  typename common_type<typename Modular<T>::Type, long long>::type x;",
      "  stream >> x;",
      "  number.value = Modular<T>::normalize(x);",
      "  return stream;",
      "}",
      "",
      "/*",
      "using ModType = int;",
      "",
      "struct VarMod { static ModType value; };",
      "ModType VarMod::value;",
      "ModType& md = VarMod::value;",
      "using Mint = Modular<VarMod>;",
      "*/",
      "",
      "constexpr int md = 998244353;",
      "using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;",
      "",
      "\/*vector<Mint> fact(1, 1);",
      "vector<Mint> inv_fact(1, 1);",
      "",
      "Mint C(int n, int k) {",
      "  if (k < 0 || k > n) {",
      "    return 0;",
      "  }",
      "  while ((int) fact.size() < n + 1) {",
      "    fact.push_back(fact.back() * (int) fact.size());",
      "    inv_fact.push_back(1 / fact.back());",
      "  }",
      "  return fact[n] * inv_fact[k] * inv_fact[n - k];",
      "}*/",
      ""
    ]
  },
}